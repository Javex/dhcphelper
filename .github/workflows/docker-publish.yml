name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 9 1 * *"

jobs:
  buildx:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install Cosign
        id: install-cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.8.0
        with:
          cosign-release: 'v2.4.2'

      - name: Set Build Tag
        id: set-env
        run: |
          echo "TAG=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "TAG is set to $(date +%Y.%m.%d)"

      - name: Docker Login
        id: docker-login
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3.4.0

      - name: Set up Docker Buildx
        id: buildx-setup
        uses: docker/setup-buildx-action@v3.9.0

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          tags: |
            latest
            ${{ env.TAG }}

      - name: Build and Push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          sbom: true
          provenance: mode=max
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Retrieve Image Digest
        id: get-digest
        run: |
          # Define fully qualified image references for both tags.
          image_latest="docker.io/${{ github.repository }}:latest"
          image_date="docker.io/${{ github.repository }}:${{ env.TAG }}"
          
          echo "Retrieving digest for image: $image_latest"
          # Allow time for the image to be available in the registry
          sleep 10
          
          # Retrieve digest for the 'latest' tag
          digest_latest=$(docker buildx imagetools inspect "$image_latest" --raw | jq -r '.Digest')
          echo "Retrieving digest for image: $image_date"
          # Retrieve digest for the date-based tag
          digest_date=$(docker buildx imagetools inspect "$image_date" --raw | jq -r '.Digest')
          
          # Check if either digest is empty or null
          if [ -z "$digest_latest" ] || [ "$digest_latest" = "null" ]; then
            echo "Failed to retrieve digest for $image_latest" >&2
            exit 1
          fi
          if [ -z "$digest_date" ] || [ "$digest_date" = "null" ]; then
            echo "Failed to retrieve digest for $image_date" >&2
            exit 1
          fi
          
          # Optionally, verify that both digests match.
          if [ "$digest_latest" != "$digest_date" ]; then
            echo "Digest mismatch: latest digest ($digest_latest) differs from date tag digest ($digest_date)" >&2
            exit 1
          fi
          
          # Set the common digest into the environment for subsequent steps.
          echo "DIGEST=${digest_latest}" >> $GITHUB_ENV
          echo "Digest found: ${digest_latest}"

      - name: Sign the Published Docker Image
        id: sign-image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ env.DIGEST }}
        run: |
          for tag in $TAGS; do
            echo "Signing ${tag}@${DIGEST}"
            cosign sign --yes "${tag}@${DIGEST}"
          done

      - name: Create github release
        id: github-releasing
        uses: ncipollo/release-action@v1.15.0
        with:
          tag: ${{ env.TAG }}
          allowUpdates: true
          makeLatest: true
